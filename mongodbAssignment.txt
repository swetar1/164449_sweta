use mongo_practice


db.createCollection('movies')


show collections


db.movies.insert({title: "Fight Club",writer:"Chuck Palahniuk",year: 1999,actors:["Brad Pitt", "Edward Norton"]})


db.movies.insert({title: "Pulp Fiction", writer : "Quentin Tarantino",year : 1994, actors : ["John Travolta", "Uma Thurman"]})


db.movies.insert({title: "Inglorious Basterds",writer : "Quentin Tarantino", year: 2009, actors : [ "Brad Pitt" ,"Diane Kruger", "Eli Roth" ]})


db.movies.insert({title: "The Hobbit: An Unexpected Journey", writer: "J.R.R. Tolkein",year : 2012 ,franchise: "The Hobbit"})


db.movies.insert({title : "The Hobbit: The Desolation of Smaug", writer : "J.R.R. Tolkein", year: 2013 ,franchise: "The Hobbit"})


db.movies.insert({title: "The Hobbit: The Battle of the Five Armies",writer : "J.R.R. Tolkein",year : 2012,franchise : "The Hobbit",synopsis: "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a risingdarkness"})


db.movies.insert({title: "Pee Wee Herman's Big Adventure"})


db.movies.insert({title: "Avatar"})


db.movies.find().pretty()





-----------------------------------------------------------------------------------------------


1. get all documents
2. get all documents with writer set to "Quentin Tarantino"
3. get all documents where actors include "Brad Pitt"
4. get all documents with franchise set to "The Hobbit"
5. get all movies released in the 90s
6. get all movies released before the year 2000 or after 2010




db.movies.find().pretty()


db.movies.find({"writer":"Quentin Tarantino"})



db.movies.find({actors:"Brad Pitt"})


db.movies.find({franchise:"The Hobbit"})


db.movies.find({$and:[{year:{$lt:2000}},{year:{$gt:1990}}]})



db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})



-------------------------------------------------------------------------------------------------


1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of
dwarves to reclaim their mountain home - and the gold within it - from the
dragon Smaug."
2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a
mysterious and magical ring."
3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"





db.movies.update({title:"The Hobbit: An Unexpected Journey" },{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from thedragon Smaug."}})


db.movies.update({title:"The Hobbit: The Desolation of Smaug" },{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})


db.movies.update({title:"Pulp Fiction"},{$set:{actors:["John Travolta", "Uma Thurman","Samuel L. Jackson"]}})
OR
db.movies.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L. Jackson"}})


-------------------------------------------------------------------------------------------------


1. find all movies that have a synopsis that contains the word "Bilbo"
2. find all movies that have a synopsis that contains the word "Gandalf"
3. find all movies that have a synopsis that contains the word "Bilbo" and not the
word "Gandalf"
4. find all movies that have a synopsis that contains the word "dwarves" or
"hobbit"
5. find all movies that have a synopsis that contains the word "gold" and
"dragon"



db.movies.find({"synopsis":{$regex:".*Bilbo.*"}}).pretty() 



db.movies.find({"synopsis":{$regex:".*Gandalf.*"}}).pretty() 



db.movies.find({$and: [{synopsis: /Bilbo/}, {synopsis: {$not: /Gandalf/}}]}).pretty() 



db.movies.find({$or:[{"synopsis":{$regex:".*dwarves.*"}},{"synopsis":{$regex:".*hobbit.*"}}]}).pretty() 



db.movies.find({$and:[{"synopsis":{$regex:".*dwarves.*"}},{"synopsis":{$regex:".*hobbit.*"}}]}).pretty()

 



----------------------------------------------------------------------------------------------


1. delete the movie "Pee Wee Herman's Big Adventure"
2. delete the movie "Avatar"



db.movies.remove({title:"Pee Wee Herman's Big Adventure"})

db.movies.remove({title:"Avatar"})



----------------------------------------------------------------------------------------------




db.createCollection('users');



db.users.insert({_id:1,username:"GoodGuyGreg",first_name:"GoodGuy",last_name:"Greg"});


db.users.insert({_id:2,username:"ScumbagSteve",full_name:{first : "Scumbag" ,last : "Steve"}});



db.createCollection('posts');



db.posts.insert({_id:1,username:"GoodGuyGreg",title:"Passes out at party",body :"Wakes up early and cleans house"});


db.posts.insert({_id:2,username :" GoodGuyGreg",title : "Steals your identity", body : "Raises your credit score"});


db.posts.insert({_id:3,username : "GoodGuyGreg" ,title : "Reports a bug in your code" ,body : "Sends you a Pull Request"});


db.posts.insert({_id:4,username : "ScumbagSteve",title : "Borrows something",body : "Sells it"});


db.posts.insert({_id:5,username : "ScumbagSteve",title : "Borrows everything",body : "The end"});


db.posts.insert({_id:6,username : "ScumbagSteve",title : "Forks your repo on github",body : "Sets to private"});





db.createCollection('comments');




db.comments.insert({username :"GoodGuyGreg",comment : "Hope you got a good deal!",post :4 });


db.comments.insert({username :"GoodGuyGreg",comment : "What's mine is yours!",post :5 });


db.comments.insert({username :"GoodGuyGreg",comment : "Don't violate the licensing agreement!",post :6 });


db.comments.insert({username :"ScumbagSteve",comment : "It still isn't clean",post :1 });


db.comments.insert({username :"ScumbagSteve",comment : "Denied your PR cause I found a hack",post :3 });



1. find all users
2. find all posts
3. find all posts that was authored by "GoodGuyGreg"
4. find all posts that was authored by "ScumbagSteve"
5. find all comments
6. find all comments that was authored by "GoodGuyGreg"
7. find all comments that was authored by "ScumbagSteve"
8. find all comments belonging to the post "Reports a bug in your code"


db.users.find().pretty()


db.posts.find().pretty()


db.posts.find({username:"GoodGuyGreg"}).pretty()


db.posts.find({username:"ScumbagSteve"}).pretty()


db.comments.find().pretty()


db.comments.find({username:"GoodGuyGreg"}).pretty()


db.comments.find({username:"ScumbagSteve"}).pretty()


db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id}).pretty() 


 


 


